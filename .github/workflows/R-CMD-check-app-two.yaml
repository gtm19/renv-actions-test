# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'packages/app.two/**'

env:
  APP_PATH: 'packages/app.two/'

name: app.two R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        working-directory: ${{ env.APP_PATH }}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release'}
          # - {os: macOS-latest, r: '3.6'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
            r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Check for renv breadcrumbs
        id: check_renv
        uses: andstor/file-existence-action@v1
        with:
          files: "renv.lock, renv"

      - name: Query dependencies (no renv)
        if: steps.check_renv.outputs.files_exists == 'false'
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Determine renv package directory (renv) [Linux]
        if: steps.check_renv.outputs.files_exists == 'true' && startsWith(runner.os, 'Linux')
        run: |
          echo "renv_dir=~/.local/share/renv" >> $GITHUB_ENV

      - name: Determine renv package directory (renv) [macOS]
        if: steps.check_renv.outputs.files_exists == 'true' && startsWith(runner.os, 'macOS')
        run: |
          echo "renv_dir=~/Library/Application Support/renv" >> $GITHUB_ENV

      - name: Determine renv package directory (renv) [Windows]
        if: steps.check_renv.outputs.files_exists == 'true' && startsWith(runner.os, 'Windows')
        run: |
          echo "renv_dir=~\AppData\Local\renv" >> $GITHUB_ENV

      - name: Cache packages (renv)
        if: steps.check_renv.outputs.files_exists == 'true'
        uses: actions/cache@v2
        with:
          path: ${{ env.renv_dir }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Restore R package cache (no renv)
        if: steps.check_renv.outputs.files_exists == 'false'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Restore R packages (renv)
        if: steps.check_renv.outputs.files_exists == 'true'
        shell: Rscript {0}
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          renv::restore()

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install R package dependencies (no renv)
        run: |
          install.packages(c("remotes", "rcmdcheck"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Check
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = "--no-manual", error_on = "error")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
